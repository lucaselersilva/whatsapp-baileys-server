import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üîß ===== INICIALIZANDO SUPABASE CLIENT =====');
console.log('   URL:', supabaseUrl);
console.log('   Key existe?', !!supabaseKey);
console.log('   Key length:', supabaseKey?.length || 0);
console.log('   Key prefix:', supabaseKey?.substring(0, 20) + '...');

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ERRO CR√çTICO: Vari√°veis de ambiente n√£o configuradas!');
  console.error('   SUPABASE_URL:', supabaseUrl || 'MISSING');
  console.error('   SUPABASE_SERVICE_ROLE_KEY:', supabaseKey ? 'EXISTS' : 'MISSING');
  throw new Error('‚ùå Configura√ß√£o do Supabase incompleta');
}

export const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

console.log('‚úÖ Supabase Client inicializado com sucesso');
console.log('=========================================\n');

// Fun√ß√£o para salvar QR Code no Supabase
export async function saveQRToSupabase(tenantId, qrCode) {
  console.log('üìù ===== SALVANDO QR CODE =====');
  console.log('   Tenant ID:', tenantId);
  console.log('   QR Code length:', qrCode?.length || 0);
  
  try {
    // Primeiro, verificar se j√° existe um registro para este tenant
    const { data: existing, error: selectError } = await supabase
      .from('whatsapp_sessions')
      .select('id')
      .eq('tenant_id', tenantId)
      .maybeSingle();

    if (selectError) {
      console.error('‚ùå Erro ao verificar registro existente:', selectError);
      throw selectError;
    }

    console.log('   Registro existente?', !!existing);

    let result;

    if (existing) {
      // UPDATE - registro j√° existe
      console.log('   Executando UPDATE...');
      const { data, error } = await supabase
        .from('whatsapp_sessions')
        .update({
          qr_code: qrCode,
          status: 'qr_code_ready',
          updated_at: new Date().toISOString()
        })
        .eq('tenant_id', tenantId)
        .select();

      if (error) {
        console.error('‚ùå Erro no UPDATE:', error);
        throw error;
      }

      result = data;
      console.log('‚úÖ UPDATE executado com sucesso');
    } else {
      // INSERT - criar novo registro
      console.log('   Executando INSERT...');
      const { data, error } = await supabase
        .from('whatsapp_sessions')
        .insert({
          tenant_id: tenantId,
          qr_code: qrCode,
          status: 'qr_code_ready',
          updated_at: new Date().toISOString()
        })
        .select();

      if (error) {
        console.error('‚ùå Erro no INSERT:', error);
        throw error;
      }

      result = data;
      console.log('‚úÖ INSERT executado com sucesso');
    }

    console.log('   Resultado:', JSON.stringify(result, null, 2));
    console.log('================================\n');
    
    return result;
  } catch (err) {
    console.error('‚ùå EXCE√á√ÉO ao salvar QR Code:', err);
    console.error('   Stack:', err.stack);
    console.log('================================\n');
    throw err;
  }
}

// Fun√ß√£o para atualizar status da sess√£o
export async function updateSessionStatus(tenantId, status) {
  console.log(`üìä Atualizando status para tenant ${tenantId}: ${status}`);
  
  try {
    const { data, error } = await supabase
      .from('whatsapp_sessions')
      .update({
        status: status,
        updated_at: new Date().toISOString(),
        ...(status === 'connected' && { qr_code: null })
      })
      .eq('tenant_id', tenantId)
      .select();

    if (error) {
      console.error('‚ùå Erro ao atualizar status:', error);
      throw error;
    }

    console.log('‚úÖ Status atualizado:', data);
    return data;
  } catch (err) {
    console.error('‚ùå Exce√ß√£o ao atualizar status:', err);
    throw err;
  }
}

// Fun√ß√£o para carregar sess√£o do Supabase
export async function loadSessionFromSupabase(tenantId) {
  console.log(`üìÇ Carregando sess√£o para tenant: ${tenantId}`);
  
  try {
    const { data, error } = await supabase
      .from('whatsapp_sessions')
      .select('session_data')
      .eq('tenant_id', tenantId)
      .maybeSingle();

    if (error) {
      console.error('‚ùå Erro ao carregar sess√£o:', error);
      throw error;
    }

    if (data?.session_data) {
      console.log('‚úÖ Sess√£o encontrada no banco de dados');
      return data.session_data;
    }

    console.log('‚ÑπÔ∏è  Nenhuma sess√£o encontrada');
    return null;
  } catch (err) {
    console.error('‚ùå Exce√ß√£o ao carregar sess√£o:', err);
    throw err;
  }
}

// Fun√ß√£o para salvar dados da sess√£o
export async function saveSessionToSupabase(tenantId, sessionData) {
  console.log(`üíæ Salvando dados da sess√£o para tenant: ${tenantId}`);
  
  try {
    const { data, error } = await supabase
      .from('whatsapp_sessions')
      .update({
        session_data: sessionData,
        updated_at: new Date().toISOString()
      })
      .eq('tenant_id', tenantId)
      .select();

    if (error) {
      console.error('‚ùå Erro ao salvar sess√£o:', error);
      throw error;
    }

    console.log('‚úÖ Sess√£o salva com sucesso');
    return data;
  } catch (err) {
    console.error('‚ùå Exce√ß√£o ao salvar sess√£o:', err);
    throw err;
  }
}
